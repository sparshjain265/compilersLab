open AST

(* Stuff done to make use of the Tokens module generated by subJava.grm *)

type pos 			= int
type svalue			= Tokens.svalue
type ('a,'b) token	= ('a,'b) Tokens.token
type lexresult		= (svalue,pos) token

open Tokens
val lineRef = ref 1
fun updateLine n = lineRef := (!lineRef) + n
fun resetLine () = lineRef := 1
val charRef = ref 0
fun updateChar n = charRef := (!charRef) + n
fun resetChar () = charRef := 0

fun initLexer () = (resetLine(); resetChar())
fun posn ()	= (!lineRef, !charRef)

fun error (e,l : int, r : int) = TextIO.output(TextIO.stdErr, "line" ^ Int.toString l ^ "." ^ Int.toString r ^ ":" ^ e ^ "\n")

fun eof   ()      = Tokens.EOF (!lineRef,!charRef)

%%
%header (functor subJavaLexFun(structure Tokens : subJava_TOKENS));
%s COMMENT;
ws    = [\ \t];
newline	= "\n\r" | "\r\n" | "\r" | "\n";
%%

<INITIAL> {newline}							=> (updateLine 1; resetChar(); lex() );
<INITIAL> {ws}+                             => (updateChar (String.size yytext); lex() );

<INITIAL> "="								=> (updateChar 1; ASSIGN(!lineRef , !charRef));
<INITIAL> "+"								=> (updateChar 1; PLUS(!lineRef, !charRef));
<INITIAL> "-"								=> (updateChar 1; MINUS(!lineRef, !charRef));
<INITIAL> "*"								=> (updateChar 1; MUL(!lineRef, !charRef));
<INITIAL> "/"								=> (updateChar 1; DIV(!lineRef, !charRef));
<INITIAL> "&&"								=> (updateChar 2; AND(!lineRef, !charRef));
<INITIAL> "||"								=> (updateChar 2; OR(!lineRef, !charRef));
<INITIAL> "!"								=> (updateChar 1; NOT(!lineRef, !charRef));
<INITIAL> "=="								=> (updateChar 2; EQUAL(!lineRef, !charRef));
<INITIAL> "!="								=> (updateChar 2; NOTEQUAL(!lineRef, !charRef));
<INITIAL> "<"								=> (updateChar 1; LESS(!lineRef, !charRef));
<INITIAL> "<="								=> (updateChar 2; LESSEQUAL(!lineRef, !charRef));
<INITIAL> ">"								=> (updateChar 1; GREATER(!lineRef, !charRef));
<INITIAL> ">="								=> (updateChar 2; GREATEREQUAL(!lineRef, !charRef));

<INITIAL> ";"								=> (updateChar 1; SEMICOLON(!lineRef, !charRef));
<INITIAL> ","								=> (updateChar 1; COMMA(!lineRef, !charRef));
<INITIAL> "."								=> (updateChar 1; DOT(!lineRef, !charRef));
<INITIAL> "("								=> (updateChar 1; LPARA(!lineRef, !charRef));
<INITIAL> ")"								=> (updateChar 1; RPARA(!lineRef, !charRef));
<INITIAL> "{"                               => (updateChar 1; LBRACE(!lineRef, !charRef));
<INITIAL> "}"                               => (updateChar 1; RBRACE(!lineRef, !charRef));
<INITIAL> "["                               => (updateChar 1; LBRACKET(!lineRef, !charRef));
<INITIAL> "]"                               => (updateChar 1; RBRACKET(!lineRef, !charRef));

<INITIAL> "boolean"							=> (updateChar 7; BOOL(!lineRef, !charRef));
<INITIAL> "class"							=> (updateChar 5; CLASS(!lineRef, !charRef));
<INITIAL> "else"							=> (updateChar 4; ELSE(!lineRef, !charRef));
<INITIAL> "false"							=> (updateChar 5; FALSE(!lineRef, !charRef));
<INITIAL> "if"								=> (updateChar 2; IF(!lineRef, !charRef));
<INITIAL> "int"								=> (updateChar 3; INT(!lineRef, !charRef));
<INITIAL> "length"							=> (updateChar 6; LENGTH(!lineRef, !charRef));
<INITIAL> "main"							=> (updateChar 4; MAIN(!lineRef, !charRef));
<INITIAL> "new"								=> (updateChar 3; NEW(!lineRef, !charRef));
<INITIAL> "public"							=> (updateChar 6; PUBLIC(!lineRef, !charRef));
<INITIAL> "return"							=> (updateChar 6; RETURN(!lineRef, !charRef));
<INITIAL> "static"							=> (updateChar 6; STATIC(!lineRef, !charRef));
<INITIAL> "String"							=> (updateChar 6; STRING(!lineRef, !charRef));
<INITIAL> "System.out.println"				=> (updateChar 18; PRINT(!lineRef, !charRef));
<INITIAL> "this"							=> (updateChar 4; THIS(!lineRef, !charRef));
<INITIAL> "true"							=> (updateChar 4; TRUE(!lineRef, !charRef));
<INITIAL> "void"							=> (updateChar 4; VOID(!lineRef, !charRef));
<INITIAL> "while"							=> (updateChar 5; WHILE(!lineRef, !charRef));

<INITIAL> "//".*							=> (lex());
<INITIAL> "/*"								=> (YYBEGIN COMMENT; lex());
<COMMENT> .									=> (lex());
<COMMENT> {newline}							=> (updateLine 1; resetChar(); lex());
<COMMENT> "*/"								=> (YYBEGIN INITIAL; lex());

<INITIAL> [~]?[0-9]+						=> (updateChar (String.size yytext); NUMBER(valOf (Int.fromString yytext), !lineRef, !charRef));
<INITIAL> [_a-zA-Z][_0-9a-zA-Z]*			=> (updateChar (String.size yytext); ID(yytext, !lineRef, !charRef));
<INITIAL> ("\"")(\\. | [^\\"])*("\"")		=> (updateChar (String.size yytext); STRINGLITERAL(String.substring(yytext, 1, (String.size yytext) - 2), !lineRef, !charRef));


<INITIAL> .									=> (error("Bad Character: [" ^ yytext ^ "]\n", !lineRef, !charRef); lex());