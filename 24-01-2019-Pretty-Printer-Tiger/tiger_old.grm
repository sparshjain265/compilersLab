

%%

%pos int
%eop EOF
%verbose
%name Tiger

%term CONST of int
	| VAR of string
	|	PLUS
	|	MINUS
	|	MUL
	|	DIV
	|	EOF
	|	NEWLINE
	|	LPAREN
	|	RPAREN

%noshift EOF

%nonterm EXP of Ast.Expr
		|	EXPS of Ast.Expr list
		|	PROGRAM of Ast.Expr list

%left PLUS MINUS  (* + and - are of same precedence *)
%left MUL DIV     (* higher than + and -            *)

%%

PROGRAM	: EXPS				(EXPS)

EXPS	: (* empty *)			([])
		| EXP EXPS	(EXP :: EXPS)

EXP	: CONST			(Ast.Const CONST)
		| VAR				(Ast.Var VAR)
		| EXP PLUS EXP	(Ast.plus EXP1 EXP2)
		| EXP MINUS EXP (Ast.minus EXP1 EXP2)
		| EXP MUL EXP (Ast.mul EXP1 EXP2)
		| EXP DIV EXP (Ast.divide EXP1 EXP2)
		| LPAREN EXP RPAREN (EXP)